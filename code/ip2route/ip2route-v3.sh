#!/bin/bash
# ip route management script.
# Copyright (c) Chen Fang 2023, mtdcy.chen@gmail.com.
#
# DON'T exec this script directly, create symlinks first.
#
#  <ip table id>-<ipset name>@<gateway ip>@<device name>.sh
#
# v0.3 - 20240123, migrate to nft.
#
# v0.2 - 20231125, code refactoring.
# 				   ...
#
# v0.1 - initial version

# nft table
NFT=${TABLE:-fw4}

# root privilege is required
[ $(id -u) -eq 0 ] || exec sudo "$0" "$@"

dnsmasq="$(dirname $0)/dnsmasq.auto"
[ -f $dnsmasq ] || echo "# dnsmasq servers, generated by ip2route.sh" > $dnsmasq

usage() {
    cat << EOF
ip route management script, v0.2.
Copyright (c) Chen Fang 2023, mtdcy.chen@gmail.com.

ip2route.sh options

update mode:
  ip2route.sh path/to/some.ip  [list]   # create a ipset from ip file, and add it to list.
  ip2route.sh path/to/some.lst [list]   # create a ipset from list file, and add it to list.

full mode:
  symlink_of_ip2route.sh                # update ipset and setup the route.
  symlink_of_ip2route.sh flush          # clear everything except the ipset.

  Please create the right symlink before enter full mode:

  <ip table id>-<ipset name>@<gateway ip>@<device name>.sh -> ip2route.sh
EOF
}

is_host() { [[ $@ =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ ]]; }

# update_dnsmasq <domain> <set> <@dns>
update_dnsmasq() {
    # delete records
    sed -i "/server=\/$1\/*/d" "$dnsmasq"
    sed -i "/nftset=\/$1\/*/d" "$dnsmasq"

    for s in ${@:3}; do
        echo "server=/$1/${s#@}" >> "$dnsmasq"
        echo "nftset=/$1/4#inet#$NFT#$2" >> "$dnsmasq"
    done
}

# update_ipset path/to/some.ip <nft set name>
update_ipset() {
    local name=$2
    local dns=()
    while read line; do
        # remove spaces and tail comments
        IFS=' ' read host _ <<< "$line"

        [ -z "$host" ] && continue;
        [[ "$host" =~ '#' ]] && continue;

        # save dns
        [[ "$host" =~ '@' ]] && dns+=($host) && continue

        echo $host

        # add ip to set directly
	is_host $host && nft add element inet $NFT $name { $host } && continue

        [ ${#dns[@]} -eq 0 ] || echo " ${dns[@]}"
        update_dnsmasq $host $name ${dns[@]}
    done < "$1"
}

# update_iplst path/to/some.lst <nft set name>
update_iplst() {
    name=$2
    while read ips; do
        [[ $ips =~ '#' ]] && continue # ignore comments

        update_ipset $(dirname $1)/$ips $name || return $?
    done < "$1"
}

[ "$1" = "help" ] && usage && exit 0

# update mode: create/update ipset from *.ip or *.lst and add it to list
if [ $# -gt 0 -a "$1" != "flush" ]; then
    case "$1" in
        *.lst)
            update_iplst "$1" "$2"
            ;;
        *.ip)
            update_ipset "$1" "$2"
            ;;
        *)
            usage
            ;;
    esac
    exit $?
fi

# full mode:
IFS='-@' read iptbl ipset route netif _ <<< "$(basename $0)"
netif=${netif%.sh} # remove tailing '.sh'

cd $(dirname $0)
echo "$PWD: $iptbl-$ipset@$route@$netif"

iptbl=$(expr $iptbl + 1)    # never use table 00
iptmark=$iptbl
iptrule="-m set --match-set $ipset dst -j MARK --set-mark $iptmark"

if [ "$1" = "flush" ]; then
    # delete exists table
    ip route del default table $iptbl || true
    # clear route rules
    ip rule flush table $iptbl || true
    # clear iptables [TODO]
    #iptables -t mangle -D PREROUTING $iptrule || true
    #iptables -t mangle -D OUTPUT $iptrule || true
else
    # new nftset, may exist
    nft flush set inet $NFT $ipset || true
    nft add set inet $NFT $ipset { type ipv4_addr \; flags interval \; }

    # new table, may exist
    ip route add default via $route dev $netif table $iptbl

    # create a new route rule: may exist
    ip rule flush table $iptbl 2> /dev/null || true
    ip rule add fwmark $iptmark table $iptbl

    # setup ipset
    ipfile="data/$ipset"
    case $(ls "$ipfile".*) in
        *.lst)  update_iplst "$ipfile.lst" $ipset ;;
        *.ip)   update_ipset "$ipfile.ip"  $ipset ;;
    esac

    # route ipset to netif
    # forward
    nft list chain inet $NFT mangle_prerouting | grep "ip daddr @$ipset" > /dev/null 2>&1 || {
        nft insert rule inet $NFT mangle_prerouting ip daddr @$ipset counter ct mark set $iptmark
        nft add rule inet $NFT mangle_prerouting ip daddr @$ipset counter meta mark set ct mark
    }
    # output
    nft list chain inet $NFT mangle_output | grep "ip daddr @$ipset" > /dev/null 2>&1 || {
        nft insert rule inet $NFT mangle_output ip daddr @$ipset counter ct mark set $iptmark
        nft add rule inet $NFT mangle_output ip daddr @$ipset counter meta mark set ct mark
    }
fi

echo ""
echo "= route table $iptbl:"
ip route list table $iptbl
ip rule list table $iptbl
echo ""
echo "= ipset:"
#ipset list $ipset
nft list set inet $NFT $ipset
echo ""
echo "= iptables:"
nft list chain inet $NFT mangle_output
nft list chain inet $NFT mangle_prerouting